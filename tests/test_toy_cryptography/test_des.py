import unittest
from typing import Sequence

from bitarray.util import ba2hex, ba2int, int2ba

from toy_cryptography.feistel_cipher.scheme import FeistelText, encryption_round as feistel_encryption_round
from toy_cryptography.des.key_schedule import des_key_schedule
from toy_cryptography.des.feistel_function import des_feistel_function
from toy_cryptography.des.scheme import encrypt as des_encrypt, decrypt as des_decrypt


class DESKeyScheduleTests(unittest.TestCase):
    """
    https://page.math.tu-berlin.de/~kant/teaching/hess/krypto-ws2006/des.htm
    """

    sample_round_keys = (
        0b000110_110000_001011_101111_111111_000111_000001_110010,
        0b011110_011010_111011_011001_110110_111100_100111_100101,
        0b010101_011111_110010_001010_010000_101100_111110_011001,
        0b011100_101010_110111_010110_110110_110011_010100_011101,
        0b011111_001110_110000_000111_111010_110101_001110_101000,
        0b011000_111010_010100_111110_010100_000111_101100_101111,
        0b111011_001000_010010_110111_111101_100001_100010_111100,
        0b111101_111000_101000_111010_110000_010011_101111_111011,
        0b111000_001101_101111_101011_111011_011110_011110_000001,
        0b101100_011111_001101_000111_101110_100100_011001_001111,
        0b001000_010101_111111_010011_110111_101101_001110_000110,
        0b011101_010111_000111_110101_100101_000110_011111_101001,
        0b100101_111100_010111_010001_111110_101011_101001_000001,
        0b010111_110100_001110_110111_111100_101110_011100_111010,
        0b101111_111001_000110_001101_001111_010011_111100_001010,
        0b110010_110011_110110_001011_000011_100001_011111_110101,
    )

    def test_round_keys(self):
        main_key_int = 0b00010011_00110100_01010111_01111001_10011011_10111100_11011111_11110001
        main_key = int2ba(main_key_int, length=64)
        key_schedule = des_key_schedule(main_key)
        for expected_round_key_int, round_key in zip(self.sample_round_keys, key_schedule):
            round_key_int = ba2int(round_key)
            self.assertEqual(expected_round_key_int, round_key_int)

class DESFeistelFunctionTests(unittest.TestCase):
    """
    NIST Special Publication 500-20, page 9
    https://csrc.nist.gov/pubs/sp/500/20/upd1/final
    """

    @staticmethod
    def feistel_text_32(left: int, right: int):
        return FeistelText(
            left=int2ba(left, length=32),
            right=int2ba(right, length=32),
        )

    sample_input = (
        feistel_text_32(left=0x00000000, right=0x00000000)
    )

    sample_round_outputs = (
        feistel_text_32(left=0x00000000, right=0x47092B5B),
        feistel_text_32(left=0x47092B5B, right=0x53F372AF),
        feistel_text_32(left=0x53F372AF, right=0x9F1D158B),
        feistel_text_32(left=0x9F1D158B, right=0x8109CBEE),
        feistel_text_32(left=0x8109CBEE, right=0x60448698),
        feistel_text_32(left=0x60448698, right=0x29EBB1A4),
        feistel_text_32(left=0x29EBB1A4, right=0x620CC3A3),
        feistel_text_32(left=0x620CC3A3, right=0xDEEB3D8A),
        feistel_text_32(left=0xDEEB3D8A, right=0xA1A0354D),
        feistel_text_32(left=0xA1A0354D, right=0x9F0303DC),
        feistel_text_32(left=0x9F0303DC, right=0xFD898EE8),
        feistel_text_32(left=0xFD898EE8, right=0x2D1AE1DD),
        feistel_text_32(left=0x2D1AE1DD, right=0xCBC829FA),
        feistel_text_32(left=0xCBC829FA, right=0xB367DEC9),
        feistel_text_32(left=0xB367DEC9, right=0x3F6C3EFD),
        feistel_text_32(left=0x3F6C3EFD, right=0x5A1E5228),
    )

    def test_round_outputs(self):
        key_int = 0x10316E028C8F3B4A
        key = int2ba(key_int, length=64)
        key_schedule = des_key_schedule(key)
        text = self.sample_input
        for round_index in range(16):
            round_key = next(key_schedule)
            text = feistel_encryption_round(text, round_key, des_feistel_function)
            expected_text = self.sample_round_outputs[round_index]
            self.assertEqual(expected_text, text, msg=f"failure after round {round_index+1}")


class DESTestVectors(unittest.TestCase):
    """
    NIST Special Publication 500-20, pages 28-33
    https://csrc.nist.gov/pubs/sp/500/20/upd1/final
    """

    def _test_with_vectors(self, vectors: Sequence[tuple[int, int, int]]):
        for key_int, plaintext_int, expected_ciphertext_int in self.ip_and_e_test_vectors:
            key = int2ba(key_int, length=64)
            plaintext = int2ba(plaintext_int, length=64)
            expected_ciphertext = int2ba(expected_ciphertext_int, length=64)

            with self.subTest(plaintext=ba2hex(plaintext)):
                ciphertext = des_encrypt(plaintext, key)
                self.assertEqual(ba2hex(expected_ciphertext), ba2hex(ciphertext))
                round_trip_plaintext = des_decrypt(ciphertext, key)
                self.assertEqual(ba2hex(plaintext), ba2hex(round_trip_plaintext))

    ip_and_e_test_vectors = (
        (0x0101010101010101, 0x95F8A5E5DD31D900, 0x8000000000000000),
        (0x0101010101010101, 0xDD7F121CA5015619, 0x4000000000000000),
        (0x0101010101010101, 0x2E8653104F3834EA, 0x2000000000000000),
        (0x0101010101010101, 0x4BD388FF6CD81D4F, 0x1000000000000000),
        (0x0101010101010101, 0x20B9E767B2FB1456, 0x0800000000000000),
        (0x0101010101010101, 0x55579380D77138EF, 0x0400000000000000),
        (0x0101010101010101, 0x6CC5DEFAAF04512F, 0x0200000000000000),
        (0x0101010101010101, 0x0D9F279BA5D87260, 0x0100000000000000),
        (0x0101010101010101, 0xD9031B0271BD5A0A, 0x0080000000000000),
        (0x0101010101010101, 0x424250B37C3DD951, 0x0040000000000000),
        (0x0101010101010101, 0xB8061B7ECD9A21E5, 0x0020000000000000),
        (0x0101010101010101, 0xF15D0F286B65BD28, 0x0010000000000000),
        (0x0101010101010101, 0xADD0CC8D6E5DEBA1, 0x0008000000000000),
        (0x0101010101010101, 0xE6D5F82752AD63D1, 0x0004000000000000),
        (0x0101010101010101, 0xECBFE3BD3F591A5E, 0x0002000000000000),
        (0x0101010101010101, 0xF356834379D165CD, 0x0001000000000000),
        (0x0101010101010101, 0x2B9F982F20037FA9, 0x0000800000000000),
        (0x0101010101010101, 0x889DE068A16F0BE6, 0x0000400000000000),
        (0x0101010101010101, 0xE19E275D846A1298, 0x0000200000000000),
        (0x0101010101010101, 0x329A8ED523D71AEC, 0x0000100000000000),
        (0x0101010101010101, 0xE7FCE22557D23C97, 0x0000080000000000),
        (0x0101010101010101, 0x12A9F5817FF2D65D, 0x0000040000000000),
        (0x0101010101010101, 0xA484C3AD38DC9C19, 0x0000020000000000),
        (0x0101010101010101, 0xFBE00A8A1EF8AD72, 0x0000010000000000),
        (0x0101010101010101, 0x750D079407521363, 0x0000008000000000),
        (0x0101010101010101, 0x64FEED9C724C2FAF, 0x0000004000000000),
        (0x0101010101010101, 0xF02B263B328E2B60, 0x0000002000000000),
        (0x0101010101010101, 0x9D64555A9A10B852, 0x0000001000000000),
        (0x0101010101010101, 0xD106FF0BED5255D7, 0x0000000800000000),
        (0x0101010101010101, 0xE1652C6B138C64A5, 0x0000000400000000),
        (0x0101010101010101, 0xE428581186EC8F46, 0x0000000200000000),
        (0x0101010101010101, 0xAEB5F5EDE22D1A36, 0x0000000100000000),
        (0x0101010101010101, 0xE943D7568AEC0C5C, 0x0000000080000000),
        (0x0101010101010101, 0xDF98C8276F54B04B, 0x0000000040000000),
        (0x0101010101010101, 0xB160E4680F6C696F, 0x0000000020000000),
        (0x0101010101010101, 0xFA0752B07D9C4AB8, 0x0000000010000000),
        (0x0101010101010101, 0xCA3A2B036DBC8502, 0x0000000008000000),
        (0x0101010101010101, 0x5E0905517BB59BCF, 0x0000000004000000),
        (0x0101010101010101, 0x814EEB3B91D90726, 0x0000000002000000),
        (0x0101010101010101, 0x4D49DB1532919C9F, 0x0000000001000000),
        (0x0101010101010101, 0x25EB5FC3F8CF0621, 0x0000000000800000),
        (0x0101010101010101, 0xAB6A20C0620D1C6F, 0x0000000000400000),
        (0x0101010101010101, 0x79E90DBC98F92CCA, 0x0000000000200000),
        (0x0101010101010101, 0x866ECEDD8072BB0E, 0x0000000000100000),
        (0x0101010101010101, 0x8B54536F2F3E64A8, 0x0000000000080000),
        (0x0101010101010101, 0xEA51D3975595B86B, 0x0000000000040000),
        (0x0101010101010101, 0xCAFFC6AC4542DE31, 0x0000000000020000),
        (0x0101010101010101, 0x8DD45A2DDF90796C, 0x0000000000010000),
        (0x0101010101010101, 0x1029D55E880EC2D0, 0x0000000000008000),
        (0x0101010101010101, 0x5D86CB23639DBEA9, 0x0000000000004000),
        (0x0101010101010101, 0x1D1CA853AE7C0C5F, 0x0000000000002000),
        (0x0101010101010101, 0xCE332329248F3228, 0x0000000000001000),
        (0x0101010101010101, 0x8405D1ABE24FB942, 0x0000000000000800),
        (0x0101010101010101, 0xE643D78090CA4207, 0x0000000000000400),
        (0x0101010101010101, 0x48221B9937748A23, 0x0000000000000200),
        (0x0101010101010101, 0xDD7C0BBD61FAFD54, 0x0000000000000100),
        (0x0101010101010101, 0x2FBC291A570DB5C4, 0x0000000000000080),
        (0x0101010101010101, 0xE07C30D7E4E26E12, 0x0000000000000040),
        (0x0101010101010101, 0x0953E2258E8E90A1, 0x0000000000000020),
        (0x0101010101010101, 0x5B711BC4CEEBF2EE, 0x0000000000000010),
        (0x0101010101010101, 0xCC083F1E6D9E85F6, 0x0000000000000008),
        (0x0101010101010101, 0xD2FD8867D50D2DFE, 0x0000000000000004),
        (0x0101010101010101, 0x06E7EA22CE92708F, 0x0000000000000002),
        (0x0101010101010101, 0x166B40B44ABA4BD6, 0x0000000000000001),
    )

    def test_ip_and_e(self):
        self._test_with_vectors(self.ip_and_e_test_vectors)

    pc1_and_pc2_test_vectors = (
        (0x8001010101010101, 0x0000000000000000, 0x95A8D72813DAA94D),
        (0x4001010101010101, 0x0000000000000000, 0x0EEC1487DD8C26D5),
        (0x2001010101010101, 0x0000000000000000, 0x7AD16FFB79C45926),
        (0x1001010101010101, 0x0000000000000000, 0xD3746294CA6A6CF3),
        (0x0801010101010101, 0x0000000000000000, 0x809F5F873C1FD761),
        (0x0401010101010101, 0x0000000000000000, 0xC02FAFFEC989D1FC),
        (0x0201010101010101, 0x0000000000000000, 0x4615AA1D33E72F10),
        (0x0180010101010101, 0x0000000000000000, 0x2055123350C00858),
        (0x0140010101010101, 0x0000000000000000, 0xDF3B99D6577397C8),
        (0x0120010101010101, 0x0000000000000000, 0x31FE17369B5288C9),
        (0x0110010101010101, 0x0000000000000000, 0xDFDD3CC64DAE1642),
        (0x0108010101010101, 0x0000000000000000, 0x178C83CE2B399D94),
        (0x0104010101010101, 0x0000000000000000, 0x50F636324A9B7F80),
        (0x0102010101010101, 0x0000000000000000, 0xA8468EE3BC18F06D),
        (0x0101800101010101, 0x0000000000000000, 0xA2DC9E92FD3CDE92),
        (0x0101400101010101, 0x0000000000000000, 0xCAC09F797D031287),
        (0x0101200101010101, 0x0000000000000000, 0x90BA680B22AEB525),
        (0x0101100101010101, 0x0000000000000000, 0xCE7A24F350E280B6),
        (0x0101080101010101, 0x0000000000000000, 0x882BFF0AA01A0B87),
        (0x0101040101010101, 0x0000000000000000, 0x25610288924511C2),
        (0x0101020101010101, 0x0000000000000000, 0xC71516C29C75D170),
        (0x0101018001010101, 0x0000000000000000, 0x5199C29A52C9F059),
        (0x0101014001010101, 0x0000000000000000, 0xC22F0A294A71F29F),
        (0x0101012001010101, 0x0000000000000000, 0xEE371483714C02EA),
        (0x0101011001010101, 0x0000000000000000, 0xA81FBD448F9E522F),
        (0x0101010801010101, 0x0000000000000000, 0x4F644C92E192DFED),
        (0x0101010401010101, 0x0000000000000000, 0x1AFA9A66A6DF92AE),
        (0x0101010201010101, 0x0000000000000000, 0xB3C1CC715CB879D8),
        (0x0101010180010101, 0x0000000000000000, 0x19D032E64AB0BD8B),
        (0x0101010140010101, 0x0000000000000000, 0x3CFAA7A7DC8720DC),
        (0x0101010120010101, 0x0000000000000000, 0xB7265F7F447AC6F3),
        (0x0101010110010101, 0x0000000000000000, 0x9DB73B3C0D163F54),
        (0x0101010108010101, 0x0000000000000000, 0x8181B65BABF4A975),
        (0x0101010104010101, 0x0000000000000000, 0x93C9B64042EAA240),
        (0x0101010102010101, 0x0000000000000000, 0x5570530829705592),
        (0x0101010101800101, 0x0000000000000000, 0x8638809E878787A0),
        (0x0101010101400101, 0x0000000000000000, 0x41B9A79AF79AC208),
        (0x0101010101200101, 0x0000000000000000, 0x7A9BE42F2009A892),
        (0x0101010101100101, 0x0000000000000000, 0x29038D56BA6D2745),
        (0x0101010101080101, 0x0000000000000000, 0x5495C6ABF1E5DF51),
        (0x0101010101040101, 0x0000000000000000, 0xAE13DBD561488933),
        (0x0101010101020101, 0x0000000000000000, 0x024D1FFA8904E389),
        (0x0101010101018001, 0x0000000000000000, 0xD1399712F99BF02E),
        (0x0101010101014001, 0x0000000000000000, 0x14C1D7C1CFFEC79E),
        (0x0101010101012001, 0x0000000000000000, 0x1DE5279DAE3BED6F),
        (0x0101010101011001, 0x0000000000000000, 0xE941A33F85501303),
        (0x0101010101010801, 0x0000000000000000, 0xDA99DBBC9A03F379),
        (0x0101010101010401, 0x0000000000000000, 0xB7FC92F91D8E92E9),
        (0x0101010101010201, 0x0000000000000000, 0xAE8E5CAA3CA04E85),
        (0x0101010101010180, 0x0000000000000000, 0x9CC62DF43B6EED74),
        (0x0101010101010140, 0x0000000000000000, 0xD863DBB5C59A91A0),
        (0x0101010101010120, 0x0000000000000000, 0xA1AB2190545B91D7),
        (0x0101010101010110, 0x0000000000000000, 0x0875041E64C570F7),
        (0x0101010101010108, 0x0000000000000000, 0x5A594528BEBEF1CC),
        (0x0101010101010104, 0x0000000000000000, 0xFCDB3291DE21F0C0),
        (0x0101010101010102, 0x0000000000000000, 0x869EFD7F9F265A09),
    )

    def test_pc1_and_pc2(self):
        self._test_with_vectors(self.pc1_and_pc2_test_vectors)

    p_test_vectors = (
        (0x1046913489980131, 0x0000000000000000, 0x88D55E54F54C97B4),
        (0x1007103489988020, 0x0000000000000000, 0x0C0CC00C83EA48FD),
        (0x10071034C8980120, 0x0000000000000000, 0x83BC8EF3A6570183),
        (0x1046103489988020, 0x0000000000000000, 0xDF725DCAD94EA2E9),
        (0x1086911519190101, 0x0000000000000000, 0xE652B53B550BE8B0),
        (0x1086911519580101, 0x0000000000000000, 0xAF527120C485CBB0),
        (0x5107B01519580101, 0x0000000000000000, 0x0F04CE393DB926D5),
        (0x1007B01519190101, 0x0000000000000000, 0xC9F00FFC74079067),
        (0x3107915498080101, 0x0000000000000000, 0x7CFD82A593252B4E),
        (0x3107919498080101, 0x0000000000000000, 0xCB49A2F9E91363E3),
        (0x10079115B9080140, 0x0000000000000000, 0x00B588BE70D23F56),
        (0x3107911598080140, 0x0000000000000000, 0x406A9A6AB43399AE),
        (0x1007D01589980101, 0x0000000000000000, 0x6CB773611DCA9ADA),
        (0x9107911589980101, 0x0000000000000000, 0x67FD21C17DBB5D70),
        (0x9107D01589190101, 0x0000000000000000, 0x9592CB4110430787),
        (0x1007D01598980120, 0x0000000000000000, 0xA6B7FF68A318DDD3),
        (0x1007940498190101, 0x0000000000000000, 0x4D102196C914CA16),
        (0x0107910491190401, 0x0000000000000000, 0x2DFA9F4573594965),
        (0x0107910491190101, 0x0000000000000000, 0xB46604816C0E0774),
        (0x0107940491190401, 0x0000000000000000, 0x6E7E6221A4F34E87),
        (0x19079210981A0101, 0x0000000000000000, 0xAA85E74643233199),
        (0x1007911998190801, 0x0000000000000000, 0x2E5A19DB4D1962D6),
        (0x10079119981A0801, 0x0000000000000000, 0x23A866A809D30894),
        (0x1007921098190101, 0x0000000000000000, 0xD812D961F017D320),
        (0x100791159819010B, 0x0000000000000000, 0x055605816E58608F),
        (0x1004801598190101, 0x0000000000000000, 0xABD88E8B1B7716F1),
        (0x1004801598190102, 0x0000000000000000, 0x537AC95BE69DA1E1),
        (0x1004801598190108, 0x0000000000000000, 0xAED0F6AE3C25CDD8),
        (0x1002911598100104, 0x0000000000000000, 0xB3E35A5EE53E7B8D),
        (0x1002911598190104, 0x0000000000000000, 0x61C79C71921A2EF8),
        (0x1002911598100201, 0x0000000000000000, 0xE2F5728F0995013C),
        (0x1002911698100101, 0x0000000000000000, 0x1AEAC39A61F0A464),
    )

    def test_p(self):
        self._test_with_vectors(self.p_test_vectors)

    substitution_test_vectors = (
        (0x7CA110454A1A6E57, 0x01A1D6D039776742, 0x690F5B0D9A26939B),
        (0x0131D9619DC1376E, 0x5CD54CA83DEF57DA, 0x7A389D10354BD271),
        (0x07A1133E4A0B2686, 0x0248D43806F67172, 0x868EBB51CAB4599A),
        (0x3849674C2602319E, 0x51454B582DDF440A, 0x7178876E01F19B2A),
        (0x04B915BA43FEB5B6, 0x42FD443059577FA2, 0xAF37FB421F8C4095),
        (0x0113B970FD34F2CE, 0x059B5E0851CF143A, 0x86A560F10EC6D85B),
        (0x0170F175468FB5E6, 0x0756D8E0774761D2, 0x0CD3DA020021DC09),
        (0x43297FAD38E373FE, 0x762514B829BF486A, 0xEA676B2CB7DB2B7A),
        (0x07A7137045DA2A16, 0x3BDD119049372802, 0xDFD64A815CAF1A0F),
        (0x04689104C2FD3B2F, 0x26955F6835AF609A, 0x5C513C9C4886C088),
        (0x37D06BB516CB7546, 0x164D5E404F275232, 0x0A2AEEAE3FF4AB77),
        (0x1F08260D1AC2465E, 0x6B056E18759F5CCA, 0xEF1BF03E5DFA575A),
        (0x584023641ABA6176, 0x004BD6EF09176062, 0x88BF0DB6D70DEE56),
        (0x025816164629B007, 0x480D39006EE762F2, 0xA1F9915541020B56),
        (0x49793EBC79B3258F, 0x437540C8698F3CFA, 0x6FBF1CAFCFFD0556),
        (0x4FB05E1515AB73A7, 0x072D43A077075292, 0x2F22E49BAB7CA1AC),
        (0x49E95D6D4CA229BF, 0x02FE55778117F12A, 0x5A6B612CC26CCE4A),
        (0x018310DC409B26D6, 0x1D9D5C5018F728C2, 0x5F4C038ED12B2E41),
        (0x1C587F1C13924FEF, 0x305532286D6F295A, 0x63FAC0D034D9F793),
    )

    def test_substitution(self):
        self._test_with_vectors(self.substitution_test_vectors)


if __name__ == '__main__':
    unittest.main()
